<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Simple Basketball Game</title>
<style>
  body {
    margin: 0;
    background: #1a6f24;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
  }
  canvas {
    background: #f2c94c; /* basketball court color */
    border: 2px solid #4a2c0b;
    border-radius: 10px;
  }
</style>
</head>
<body>
<canvas id="gameCanvas" width="600" height="400"></canvas>

<script>
  const canvas = document.getElementById("gameCanvas");
  const ctx = canvas.getContext("2d");

  // Player properties
  const player = {
    x: 100,
    y: 300,
    width: 30,
    height: 60,
    color: "blue",
    speed: 4,
  };

  // Ball properties
  const ball = {
    x: player.x + player.width + 10,
    y: player.y + player.height / 2,
    radius: 15,
    color: "orange",
    vx: 0,
    vy: 0,
    isShot: false,
    gravity: 0.5,
  };

  // Hoop properties
  const hoop = {
    x: canvas.width - 80,
    y: 150,
    width: 10,
    height: 50,
    color: "red",
  };

  // Keyboard input tracking
  const keys = {};

  window.addEventListener("keydown", (e) => {
    keys[e.key.toLowerCase()] = true;
  });
  window.addEventListener("keyup", (e) => {
    keys[e.key.toLowerCase()] = false;
  });

  // Draw player
  function drawPlayer() {
    ctx.fillStyle = player.color;
    ctx.fillRect(player.x, player.y, player.width, player.height);
  }

  // Draw ball
  function drawBall() {
    ctx.beginPath();
    ctx.fillStyle = ball.color;
    ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
    ctx.fill();
    ctx.closePath();
  }

  // Draw hoop
  function drawHoop() {
    ctx.fillStyle = hoop.color;
    ctx.fillRect(hoop.x, hoop.y, hoop.width, hoop.height);
    // Net circle (rim)
    ctx.beginPath();
    ctx.strokeStyle = "white";
    ctx.lineWidth = 3;
    ctx.arc(hoop.x + hoop.width / 2, hoop.y, 20, 0, Math.PI);
    ctx.stroke();
  }

  // Update player position based on keys pressed
  function updatePlayer() {
    if (keys["arrowleft"] || keys["a"]) {
      player.x -= player.speed;
      if (!ball.isShot) ball.x -= player.speed;
    }
    if (keys["arrowright"] || keys["d"]) {
      player.x += player.speed;
      if (!ball.isShot) ball.x += player.speed;
    }
    if (keys["arrowup"] || keys["w"]) {
      player.y -= player.speed;
      if (!ball.isShot) ball.y -= player.speed;
    }
    if (keys["arrowdown"] || keys["s"]) {
      player.y += player.speed;
      if (!ball.isShot) ball.y += player.speed;
    }

    // Keep player inside canvas bounds
    player.x = Math.max(0, Math.min(canvas.width - player.width, player.x));
    player.y = Math.max(0, Math.min(canvas.height - player.height, player.y));

    if (!ball.isShot) {
      // Keep ball attached to player
      ball.x = player.x + player.width + 10;
      ball.y = player.y + player.height / 2;
    }
  }

  // Shoot the ball when spacebar pressed
  window.addEventListener("keydown", (e) => {
    if (e.key === " " && !ball.isShot) {
      ball.isShot = true;
      ball.vx = 8;
      ball.vy = -12;
    }
  });

  // Update ball position with simple physics
  function updateBall() {
    if (ball.isShot) {
      ball.vy += ball.gravity;
      ball.x += ball.vx;
      ball.y += ball.vy;

      // Bounce on floor
      if (ball.y + ball.radius > canvas.height) {
        ball.y = canvas.height - ball.radius;
        ball.vy *= -0.6; // lose some velocity on bounce

        // Stop ball if velocity low
        if (Math.abs(ball.vy) < 2) {
          resetBall();
        }
      }
    }
  }

  // Check if ball scored in hoop
  function checkScore() {
    if (
      ball.x + ball.radius > hoop.x &&
      ball.x - ball.radius < hoop.x + hoop.width &&
      ball.y + ball.radius > hoop.y &&
      ball.y - ball.radius < hoop.y + hoop.height
    ) {
      alert("Score! 🏀");
      resetBall();
    }
  }

  // Reset ball to player
  function resetBall() {
    ball.isShot = false;
    ball.vx = 0;
    ball.vy = 0;
    ball.x = player.x + player.width + 10;
    ball.y = player.y + player.height / 2;
  }

  // Game loop
  function gameLoop() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    drawHoop();
    drawPlayer();
    drawBall();
    updatePlayer();
    updateBall();
    checkScore();

    requestAnimationFrame(gameLoop);
  }

  gameLoop();
</script>
</body>
</html>
